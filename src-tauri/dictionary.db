md = Create a new Directory
mkdir = Create a new Directory
mklink = Create a symbolic link (linkd)
netsh = Configure Network Interfaces, Firewall & Remote access
nslookup = Name server lookup
path = Display or set a search path for executable files
pathping = Trace route plus network latency and packet loss
run = Start | RUN commands
cd = Change Directory - move to a specific Folder
date = Display or set the date
dir = Display a list of files and folders
find = Search for a text string in a file
echo = Display messages on screen, turn command-echoing on or off
git add = Add file contents to the index
git add -n = --dry-run Donâ€™t actually add the file(s), just show if they exist and/or will be ignored
git add -v = --verbose Be verbose
git add -f = --force Allow adding otherwise ignored files.
git add --sparse = Allow updating index entries outside of the sparse-checkout cone.
git add -i = --interactiveAdd modified contents in the working tree interactively to the index
git am = Apply a series of patches from a mailbox
git archive = Create an archive of files from a named tree
git bisect = Use binary search to find the commit that introduced a bug
git branch = List, create, or delete branches
git bundle = Move objects and refs by archive
git checkout = Switch branches or restore working tree files
git cherry = Apply the changes introduced by some existing commits
git citool = Graphical alternative to git-commit
git clean = Remove untracked files from the working tree
git clone = Clone a repository into a new directory
git commit = Record changes to the repository
git commit -m = Record changes to the repository with a message
git describe = Give an object a human readable name based on an available ref
git diff = Show changes between commits, commit and working tree, etc
git fetch = Download objects and refs from another repository
git format = Prepare patches for e-mail submission
git gc = Cleanup unnecessary files and optimize the local repository
git grep = Print lines matching a pattern
git gui = A portable graphical interface to Git
git init = Create an empty Git repository or reinitialize an existing one
git log = Show commit logs
git maintenance = Run tasks to optimize Git repository data
git merge = Join two or more development histories together
git mv = Move or rename a file, a directory, or a symlink
git notes = Add or inspect object notes
git pull = Fetch from and integrate with another repository or a local branch
git push = Update remote refs along with associated objects
git range = Compare two commit ranges (e.g. two versions of a branch)
git rebase = Reapply commits on top of another base tip
git reset = Reset current HEAD to the specified state
git restore = Restore working tree files
git revert = Revert some existing commits
git rm = Remove files from the working tree and from the index
git shortlog = Summarize git log output
git show = Show various types of objects
git sparse = Reduce your working tree to a subset of tracked files
git stash = Stash the changes in a dirty working directory away
git status = Show the working tree status
git submodule = Initialize, update or inspect submodules
git switch = Switch branches
git tag = Create, list, delete or verify a tag object signed with GPG
git worktree = Manage multiple working trees
git config = Get and set repository or global options
git fast = Git data exporter --> Backend for fast Git data importers
git filter = Rewrite branches
git mergetool = Run merge conflict resolution tools to resolve merge conflicts
git pack = Pack heads and tags for efficient repository access
git prune = Prune all unreachable objects from the object database
git reflog = Manage reflog information
git remote = Manage set of tracked repositories
git repack = Pack unpacked objects in a repository
git replace = Create, list, delete refs to replace objects